{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","highestBid","highestBidder","highestBidderButton","contractBalance","contractBalanceButton","acc4Balance","userBalance","userBalanceButton","thisUserBalanceButton","withdrawSum","withdrawButton","withdrawAcc","accountBalanceButton","accounts","contract","bid","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","AuctionContract","networks","instance","Contract","abi","address","methods","call","response","setState","alert","error","send","from","value","utils","toWei","response1","response2","withdraw","userBalances","noError","getContractBalance","getHighestBidder","getThisUserBalance","getUserBalance","getAccountBalance","accountBalance","contractBalanceInfo","withdrawInfo","highestBidderInfo","thisUserBalanceInfo","userBalanceInfo","accountBalanceInfo","this","className","type","onChange","event","target","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1671d784.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport AuctionContract from \"./contracts/Auction.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { highestBid:0 ,highestBidder:0 ,highestBidderButton:0 ,contractBalance:0 ,contractBalanceButton:0, \n    acc4Balance:null, userBalance:0, userBalanceButton:0, thisUserBalanceButton:0,\n    withdrawSum:0, withdrawButton:0, withdrawAcc: null,\n    accountBalanceButton:0,\n    web3: null, accounts: null, contract: null, bid: 0};\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = AuctionContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        AuctionContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      const response = await instance.methods.highestBid().call();\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance, highestBid: response});\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  bid = async () => {\n    const { accounts, contract } = this.state;\n\n    try{\n      await contract.methods.bid().send({from:accounts[0], value: this.state.web3.utils.toWei(this.state.bid)});\n    }\n    catch(error){\n      alert(\n        `Your bid isn't high enough!`,\n      );\n      console.error(error);\n    }\n\n    \n\n    const response1 = await contract.methods.highestBidder().call();\n    const response2 = await contract.methods.highestBid().call();\n\n    this.setState({ highestBidder: response1, highestBid: response2 });\n  };\n\n  withdraw = async () => {\n    const { accounts, contract } = this.state;\n\n    const response = await contract.methods.userBalances(accounts[0]).call();\n    var noError = 0;\n\n    try{\n      await contract.methods.withdraw().send({from:accounts[0]});\n      noError = 1;\n    }\n    catch(error){\n      alert(\n        `You have no balance to withdraw!`,\n      );\n      console.error(error);\n    }\n    \n    if(noError === 1){\n      if(this.state.withdrawButton === 0){\n        this.setState({ withdrawSum: response, withdrawButton: 1 });\n      }\n      else{\n        this.setState({ withdrawSum: response, withdrawButton: 0 });\n      }\n    }\n\n  };\n\n\n\n\n  getContractBalance = async () => {\n    const contract  = this.state.contract;\n\n    const response = await contract.methods.getContractBalance().call();\n\n    if(this.state.contractBalanceButton === 0){\n      this.setState({ contractBalance: response, contractBalanceButton: 1 });\n    }\n    else{\n      this.setState({ contractBalance: response, contractBalanceButton: 0 });\n    }\n    \n  };\n\n  getHighestBidder= async () => {\n    const contract = this.state.contract;\n\n    const response = await contract.methods.highestBidder().call();\n\n    if(this.state.highestBidderButton === 0){\n      this.setState({ highestBidder: response, highestBidderButton: 1 });\n    }\n    else{\n      this.setState({ highestBidder: response, highestBidderButton: 0 });\n    }\n    \n  };\n\n  getThisUserBalance= async () => {\n    const { accounts, contract } = this.state;\n\n    const response = await contract.methods.userBalances(accounts[0]).call();\n    if(this.state.thisUserBalanceButton === 0){\n      this.setState({ userBalance: response, thisUserBalanceButton: 1 });\n    }\n    else{\n      this.setState({ userBalance: response, thisUserBalanceButton: 0 });\n    }\n    \n  };\n\n  getUserBalance= async () => {\n    const contract  = this.state.contract;\n    var noError = 0;\n    var response\n    try{\n      response = await contract.methods.userBalances(this.state.acc4Balance).call();\n      noError = 1;\n    }\n    catch(error){\n      alert(\n        `You enter invalid account!`,\n      );\n      console.error(error);\n    }\n\n    if(noError === 1){\n      if(this.state.userBalanceButton === 0){\n        this.setState({ userBalance: response, userBalanceButton: 1 });\n      }\n      else{\n        this.setState({ userBalance: response, userBalanceButton: 0 });\n      }\n    }\n  };\n  \n  getAccountBalance= async () => { \n    const { accounts, contract } = this.state;\n\n      const response = await contract.methods.getAccountBalance(accounts[0]).call();\n\n      if(this.state.accountBalanceButton === 0){\n        this.setState({ accountBalance: response, accountBalanceButton: 1 });\n      }\n      else{\n        this.setState({ accountBalance: response, accountBalanceButton: 0 });\n      }\n  };\n\n\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    let contractBalanceInfo\n    if(this.state.contractBalanceButton === 0 ){\n      contractBalanceInfo = \"\"\n    }\n    else{\n      contractBalanceInfo = <h4>The balance of the contract is: {this.state.contractBalance} Wei </h4>\n    }\n\n    let withdrawInfo\n    if(this.state.withdrawButton === 0){\n      withdrawInfo = \"\"\n    }\n    else{\n      withdrawInfo = <h4>You just withdrew: {this.state.withdrawSum} Wei </h4>\n    }\n\n    let highestBidderInfo\n    if(this.state.highestBidderButton === 0 ){\n      highestBidderInfo = \"\"\n    }\n    else{\n      highestBidderInfo = <h4> The highestBidder is: {this.state.highestBidder}</h4>\n    }\n\n    let thisUserBalanceInfo\n    if(this.state.thisUserBalanceButton === 0){\n      thisUserBalanceInfo = \"\"\n    }\n    else{\n      thisUserBalanceInfo = <h4> Your userBalance is: {this.state.userBalance} Wei </h4>\n    }\n\n\n    let userBalanceInfo\n    if(this.state.userBalanceButton === 0){\n      userBalanceInfo = \"\"\n    }\n    else{\n      userBalanceInfo = <h4> This account's userBalance is: {this.state.userBalance} Wei </h4>\n    }\n\n    let accountBalanceInfo\n    if(this.state.accountBalanceButton === 0){\n      accountBalanceInfo = \"\"\n    }\n    else{\n      accountBalanceInfo = <h4> Your account Balance is: {this.state.accountBalance} Wei </h4>\n    }\n\n    return (\n      <div className=\"App\">\n        <h1>Auction Started!</h1>\n        \n        <h4>The highestBid is : {this.state.highestBid} Wei</h4>\n        \n        <p>How much Ethereum do you want to bid?</p>\n        <input type = \"Number\" onChange={(event)=> {this.setState({bid: event.target.value})}}/>\n        <button onClick={this.bid}> Bid</button>\n\n         <p> Press this button to withdraw your balance:</p>\n        <button onClick={this.withdraw}> Withdraw</button>\n        {withdrawInfo}\n\n        <p> Press this button to check highestBidder:</p>\n        <button onClick={this.getHighestBidder}> getHighestBidder</button>\n        {highestBidderInfo}\n\n        <p>Press this button to check contractBalance:</p>\n        <button onClick={this.getContractBalance}> getContractBalance</button>\n        {contractBalanceInfo}\n\n        <p>Press this button to check your userBalance:</p>\n        <button onClick={this.getThisUserBalance}> Your userBalance</button>\n        {thisUserBalanceInfo}\n\n        <p>Press this button to check your account Balance:</p>\n        <button onClick={this.getAccountBalance}> Your accountBalance</button>\n        {accountBalanceInfo}\n\n        <p>Enter account to check its userBalance:</p>\n        <input type = \"text\" onChange={(event)=> {this.setState({acc4Balance: event.target.value})}}/>\n        <button onClick={this.getUserBalance}> getUserBalance</button>\n        {userBalanceInfo}\n    \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}